from flask import Flask, request, jsonify
import os
import requests

app = Flask(__name__)

@app.route('/')
def home():
    return "тЬЕ Sports Prediction Bot is Running!"

@app.route('/webhook', methods=['POST'])
def webhook():
    try:
        data = request.get_json()
        print("ЁЯУи Received:", data)
        
        if 'message' in data:
            chat_id = data['message']['chat']['id']
            text = data['message'].get('text', '')
            
            BOT_TOKEN = os.environ.get('BOT_TOKEN')
            
            if text == '/start':
                # Language selection with NATIVE language names
                keyboard = {
                    'inline_keyboard': [
                        [{'text': 'ЁЯЗ║ЁЯЗ╕ English', 'callback_data': 'lang_en'}],
                        [{'text': 'ЁЯЗоЁЯЗ│ рд╣рд┐рдВрджреА', 'callback_data': 'lang_hi'}],
                        [{'text': 'ЁЯЗзЁЯЗй ржмрж╛ржВрж▓рж╛', 'callback_data': 'lang_bn'}],
                        [{'text': 'ЁЯЗ╡ЁЯЗ░ ╪з╪▒╪п┘И', 'callback_data': 'lang_ur'}],
                        [{'text': 'ЁЯЗ│ЁЯЗ╡ рдиреЗрдкрд╛рд▓реА', 'callback_data': 'lang_ne'}]
                    ]
                }
                
                url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
                payload = {
                    'chat_id': chat_id,
                    'text': 'ЁЯМН *Select Your Preferred Language:*\n\nрдХреГрдкрдпрд╛ рдЕрдкрдиреА рднрд╛рд╖рд╛ рдЪреБрдиреЗрдВ:\nржжржпрж╝рж╛ ржХрж░рзЗ ржЖржкржирж╛рж░ ржнрж╛рж╖рж╛ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи:\n╪и╪▒╪з█Б ┌й╪▒┘Е ╪з┘╛┘Ж█М ╪▓╪и╪з┘Ж ┘Е┘Ж╪к╪о╪и ┌й╪▒█М┌║:\nрдХреГрдкрдпрд╛ рдЖрдлреНрдиреЛ рднрд╛рд╖рд╛ рдЪрдпрди рдЧрд░реНрдиреБрд╣реЛрд╕реН:',
                    'reply_markup': keyboard,
                    'parse_mode': 'Markdown'
                }
                response = requests.post(url, json=payload)
                print("ЁЯУд Sent language:", response.json())
        
        elif 'callback_query' in data:
            # Handle language selection
            callback_data = data['callback_query']
            chat_id = callback_data['message']['chat']['id']
            data_value = callback_data['data']
            
            BOT_TOKEN = os.environ.get('BOT_TOKEN')
            url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
            
            if data_value.startswith('lang_'):
                lang_code = data_value.split('_')[1]
                
                # Language messages in NATIVE languages (WITHOUT prediction limit)
                messages = {
                    'en': {
                        'selected': 'тЬЕ You selected English!',
                        'title': 'ЁЯМР *Step 1 - Register*',
                        'account_new': 'тА╝я╕П *THE ACCOUNT MUST BE NEW*',
                        'instruction1': '1я╕ПтГг If after clicking the "REGISTER" button you get to the old account, you need to log out of it and click the button again.',
                        'instruction2': '2я╕ПтГг Specify a promocode during registration: **FREE**',
                        'after_reg': 'тЬЕ After REGISTRATION, click the "CHECK REGISTRATION" button'
                    },
                    'hi': {
                        'selected': 'тЬЕ рдЖрдкрдиреЗ рд╣рд┐рдВрджреА рдЪреБрдиреА!',
                        'title': 'ЁЯМР *рдЪрд░рдг 1 - рдкрдВрдЬреАрдХрд░рдг*',
                        'account_new': 'тА╝я╕П *рдЦрд╛рддрд╛ рдирдпрд╛ рд╣реЛрдирд╛ рдЪрд╛рд╣рд┐рдП*',
                        'instruction1': '1я╕ПтГг рдпрджрд┐ "REGISTER" рдмрдЯрди рдкрд░ рдХреНрд▓рд┐рдХ рдХрд░рдиреЗ рдХреЗ рдмрд╛рдж рдЖрдк рдкреБрд░рд╛рдиреЗ рдЦрд╛рддреЗ рдореЗрдВ рдЖрддреЗ рд╣реИрдВ, рддреЛ рдЖрдкрдХреЛ рдЙрд╕рд╕реЗ рд▓реЙрдЧ рдЖрдЙрдЯ рдХрд░рдирд╛ рд╣реЛрдЧрд╛ рдФрд░ рдлрд┐рд░ рд╕реЗ рдмрдЯрди рдкрд░ рдХреНрд▓рд┐рдХ рдХрд░рдирд╛ рд╣реЛрдЧрд╛ред',
                        'instruction2': '2я╕ПтГг рдкрдВрдЬреАрдХрд░рдг рдХреЗ рджреМрд░рд╛рди рдкреНрд░реЛрдореЛрдХреЛрдб рдирд┐рд░реНрджрд┐рд╖реНрдЯ рдХрд░реЗрдВ: **FREE**',
                        'after_reg': 'тЬЕ рдкрдВрдЬреАрдХрд░рдг рдХреЗ рдмрд╛рдж, "CHECK REGISTRATION" рдмрдЯрди рдкрд░ рдХреНрд▓рд┐рдХ рдХрд░реЗрдВ'
                    },
                    'bn': {
                        'selected': 'тЬЕ ржЖржкржирж┐ ржмрж╛ржВрж▓рж╛ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзЗржЫрзЗржи!',
                        'title': 'ЁЯМР *ржзрж╛ржк 1 - ржирж┐ржмржирзНржзржи*',
                        'account_new': 'тА╝я╕П *ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯржЯрж┐ ржирждрзБржи рж╣рждрзЗ рж╣ржмрзЗ*',
                        'instruction1': '1я╕ПтГг ржпржжрж┐ "REGISTER" ржмрж╛ржЯржирзЗ ржХрзНрж▓рж┐ржХ ржХрж░рж╛рж░ ржкрж░рзЗ ржЖржкржирж┐ ржкрзБрж░рж╛ржирзЛ ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯрзЗ ржЖрж╕рзЗржи, рждрж╛рж╣рж▓рзЗ ржЖржкржирж╛ржХрзЗ ржПржЯрж┐ ржерзЗржХрзЗ рж▓ржЧ ржЖржЙржЯ ржХрж░рждрзЗ рж╣ржмрзЗ ржПржмржВ ржЖржмрж╛рж░ ржмрж╛ржЯржирзЗ ржХрзНрж▓рж┐ржХ ржХрж░рждрзЗ рж╣ржмрзЗред',
                        'instruction2': '2я╕ПтГг ржирж┐ржмржирзНржзржирзЗрж░ рж╕ржоржпрж╝ ржПржХржЯрж┐ ржкрзНрж░рзЛржорзЛржХрзЛржб ржирж┐рж░рзНржжрж┐рж╖рзНржЯ ржХрж░рзБржи: **FREE**',
                        'after_reg': 'тЬЕ ржирж┐ржмржирзНржзржирзЗрж░ ржкрж░рзЗ, "CHECK REGISTRATION" ржмрж╛ржЯржирзЗ ржХрзНрж▓рж┐ржХ ржХрж░рзБржи'
                    },
                    'ur': {
                        'selected': 'тЬЕ ╪в┘╛ ┘Ж█Т ╪з╪▒╪п┘И ┘Е┘Ж╪к╪о╪и ┌й█М!',
                        'title': 'ЁЯМР *┘Е╪▒╪н┘Д█Б 1 - ╪▒╪м╪│┘╣╪▒█М╪┤┘Ж*',
                        'account_new': 'тА╝я╕П *╪з┌й╪з╪д┘Ж┘╣ ┘Ж█М╪з █Б┘И┘Ж╪з ┌Ж╪з█Б█М█Т*',
                        'instruction1': '1я╕ПтГг ╪з┌п╪▒ "REGISTER" ╪и┘╣┘Ж ┘╛╪▒ ┌й┘Д┌й ┌й╪▒┘Ж█Т ┌й█Т ╪и╪╣╪п ╪в┘╛ ┘╛╪▒╪з┘Ж█Т ╪з┌й╪з╪д┘Ж┘╣ ┘Е█М┌║ ╪в╪к█Т █Б█М┌║╪М ╪к┘И ╪в┘╛ ┌й┘И ╪з╪│ ╪│█Т ┘Д╪з┌п ╪в╪д┘╣ █Б┘И┘Ж╪з ┘╛┌С█Т ┌п╪з ╪з┘И╪▒ ╪п┘И╪и╪з╪▒█Б ╪и┘╣┘Ж ┘╛╪▒ ┌й┘Д┌й ┌й╪▒┘Ж╪з █Б┘И┌п╪з█Ф',
                        'instruction2': '2я╕ПтГг ╪▒╪м╪│┘╣╪▒█М╪┤┘Ж ┌й█Т ╪п┘И╪▒╪з┘Ж ╪з█М┌й ┘╛╪▒┘И┘Е┘И┌й┘И┌ИцМЗхоЪ ┌й╪▒█М┌║: **FREE**',
                        'after_reg': 'тЬЕ ╪▒╪м╪│реНрдЯ╪▒█М╪┤┘Ж ┌й█Т ╪и╪╣╪п╪М "CHECK REGISTRATION" ╪и┘╣┘Ж ┘╛╪▒ ┌й┘Д┌й ┌й╪▒█М┌║'
                    },
                    'ne': {
                        'selected': 'тЬЕ рддрдкрд╛рдИрдВрд▓реЗ рдиреЗрдкрд╛рд▓реА рдЪрдпрди рдЧрд░реНрдиреБрднрдпреЛ!',
                        'title': 'ЁЯМР *рдЪрд░рдг 1 - рджрд░реНрддрд╛*',
                        'account_new': 'тА╝я╕П *рдЦрд╛рддрд╛ рдирдпрд╛рдБ рд╣реБрдиреБрдкрд░реНрдЫ*',
                        'instruction1': '1я╕ПтГг рдпрджрд┐ "REGISTER" рдмрдЯрдирдорд╛ рдХреНрд▓рд┐рдХ рдЧрд░реЗрдкрдЫрд┐ рддрдкрд╛рдИрдВ рдкреБрд░рд╛рдиреЛ рдЦрд╛рддрд╛рдорд╛ рдЖрдЙрдиреБрд╣реБрдиреНрдЫ рднрдиреЗ, рддрдкрд╛рдИрдВрд▓реЗ рдпрд╕рдмрд╛рдЯ рд▓рдЧ рдЖрдЙрдЯ рдЧрд░реНрдиреБрдкрд░реНрдЫ рд░ рдлреЗрд░рд┐ рдмрдЯрдирдорд╛ рдХреНрд▓рд┐рдХ рдЧрд░реНрдиреБрдкрд░реНрдЫред',
                        'instruction2': '2я╕ПтГг рджрд░реНрддрд╛ during рдкреНрд░реЛрдореЛрдХреЛрдб рдирд┐рд░реНрджрд┐рд╖реНрдЯ рдЧрд░реНрдиреБрд╣реЛрд╕реН: **FREE**',
                        'after_reg': 'тЬЕ рджрд░реНрддрд╛ рдкрдЫрд┐, "CHECK REGISTRATION" рдмрдЯрдирдорд╛ рдХреНрд▓рд┐рдХ рдЧрд░реНрдиреБрд╣реЛрд╕реН'
                    }
                }
                
                msg = messages.get(lang_code, messages['en'])
                
                # Registration instructions in selected language (WITHOUT prediction limit)
                message_text = f"""
{msg['selected']}

{msg['title']}

{msg['account_new']}

{msg['instruction1']}

{msg['instruction2']}

{msg['after_reg']}
                """
                
                # Buttons VERTICAL (upar-niche)
                keyboard = {
                    'inline_keyboard': [
                        [{'text': 'ЁЯУ▓ REGISTER', 'url': 'https://1w.com/registration?affiliate=FREE'}],
                        [{'text': 'тЬЕ CHECK REGISTRATION', 'callback_data': 'check_registration'}]
                    ]
                }
                
                payload = {
                    'chat_id': chat_id,
                    'text': message_text,
                    'reply_markup': keyboard,
                    'parse_mode': 'Markdown'
                }
                response = requests.post(url, json=payload)
                print("ЁЯУд Sent registration:", response.json())
            
            elif data_value == 'check_registration':
                # Check registration logic (system me limit hai but user ko nahi dikhega)
                payload = {
                    'chat_id': chat_id,
                    'text': 'ЁЯФН *Checking your registration...*\n\nPlease wait while we verify your account and deposit.',
                    'parse_mode': 'Markdown'
                }
                response = requests.post(url, json=payload)
                print("ЁЯУд Sent check registration:", response.json())
        
        return jsonify({"status": "success"})
        
    except Exception as e:
        print(f"тЭМ Error: {e}")
        return jsonify({"status": "error", "message": str(e)})

@app.route('/set_webhook', methods=['GET'])
def set_webhook():
    BOT_TOKEN = os.environ.get('BOT_TOKEN')
    VERCEL_URL = os.environ.get('VERCEL_URL')
    
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/setWebhook?url=https://{VERCEL_URL}/webhook"
    response = requests.get(url)
    
    return jsonify({
        "status": "success", 
        "result": response.json()
    })

if __name__ == '__main__':
    app.run()
