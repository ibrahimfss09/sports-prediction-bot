from flask import Flask, request, jsonify
import os
import requests
import random
from datetime import datetime, timedelta
import time
import json
import threading

app = Flask(__name__)

# Environment variables
BOT_TOKEN = os.environ.get('BOT_TOKEN')
CRICAPI_KEY = os.environ.get('CRICAPI_KEY')
VERCEL_URL = os.environ.get('VERCEL_URL', 'sports-prediction-bot.vercel.app')
ADMIN_CHAT_ID = os.environ.get('ADMIN_CHAT_ID')

# Database simulation
users_storage = {}
player_registrations = {}
player_deposits = {}

# ==================== COMPLETE MULTI-LANGUAGE INACTIVITY MESSAGES ====================
INACTIVITY_MESSAGES = {
    'en': [
        "ЁЯЪА *Why are you missing your chance?* \n\nЁЯТ░ You could be earning $50-$100 daily with our AI predictions!\n\nЁЯСЙ Click /start to get predictions now!",
        "ЁЯФе *Don't let opportunities slip away!* \n\nЁЯОп Live cricket predictions are waiting for you!\n\nЁЯСЙ /start - Get your winning predictions!",
        "ЁЯТО *Your winning streak is waiting!* \n\nЁЯУК AI-powered cricket predictions with 85%+ accuracy!\n\nЁЯСЙ /start - Start earning now!",
        "тЪб *Time is money, don't waste it!* \n\nЁЯПП Live matches are happening with great odds!\n\nЁЯСЙ /start - Get instant predictions!",
        "ЁЯОп *Perfect predictions are ready!* \n\nЁЯТ░ Your path to daily earnings starts here!\n\nЁЯСЙ /start - Don't miss out!",
        "ЁЯЪи *Alert: High-confidence predictions available!* \n\nЁЯФе Today's matches have great winning potential!\n\nЁЯСЙ /start - Claim your predictions!",
        "ЁЯТ╡ *Money-making opportunity waiting!* \n\nЁЯПЖ Professional AI predictions for today's matches!\n\nЁЯСЙ /start - Start earning now!",
        "ЁЯМЯ *Your success story starts today!* \n\nЁЯУИ Join thousands winning with our predictions!\n\nЁЯСЙ /start - Begin your journey!"
    ],
    'hi': [
        "ЁЯЪА *рдЖрдк рдЕрдкрдирд╛ рдореМрдХрд╛ рдХреНрдпреЛрдВ рдЧрдВрд╡рд╛ рд░рд╣реЗ рд╣реИрдВ?* \n\nЁЯТ░ рдЖрдк рд╣рдорд╛рд░реЗ AI predictions рдХреЗ рд╕рд╛рде рд░реЛрдЬ $50-$100 рдХрдорд╛ рд╕рдХрддреЗ рд╣реИрдВ!\n\nЁЯСЙ Predictions рдкрд╛рдиреЗ рдХреЗ рд▓рд┐рдП /start рдХреНрд▓рд┐рдХ рдХрд░реЗрдВ!",
        "ЁЯФе *рдЕрд╡рд╕рд░реЛрдВ рдХреЛ рд╣рд╛рде рд╕реЗ рди рдЬрд╛рдиреЗ рджреЗрдВ!* \n\nЁЯОп рдЖрдкрдХреЗ рд▓рд┐рдП рд▓рд╛рдЗрд╡ рдХреНрд░рд┐рдХреЗрдЯ predictions рддреИрдпрд╛рд░ рд╣реИрдВ!\n\nЁЯСЙ /start - рдЕрдкрдиреА winning predictions рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ!",
        "ЁЯТО *рдЖрдкрдХреА winning streak рдЖрдкрдХрд╛ рдЗрдВрддрдЬрд╝рд╛рд░ рдХрд░ рд░рд╣реА рд╣реИ!* \n\nЁЯУК 85%+ accuracy рдХреЗ рд╕рд╛рде AI-powered cricket predictions!\n\nЁЯСЙ /start - рдЕрдм рдХрдорд╛рдИ рд╢реБрд░реВ рдХрд░реЗрдВ!",
        "тЪб *рд╕рдордп рдкреИрд╕рд╛ рд╣реИ, рдЗрд╕реЗ рдмрд░реНрдмрд╛рдж рди рдХрд░реЗрдВ!* \n\nЁЯПП рд▓рд╛рдЗрд╡ рдореИрдЪреНрд╕ рдмреЗрд╣рддрд░реАрди odds рдХреЗ рд╕рд╛рде рдЪрд▓ рд░рд╣реЗ рд╣реИрдВ!\n\nЁЯСЙ /start - рддреБрд░рдВрдд predictions рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ!",
        "ЁЯОп *рдмрд┐рд▓реНрдХреБрд▓ рд╕рд╣реА predictions рддреИрдпрд╛рд░ рд╣реИрдВ!* \n\nЁЯТ░ рдЖрдкрдХреА рджреИрдирд┐рдХ рдХрдорд╛рдИ рдХрд╛ рд░рд╛рд╕реНрддрд╛ рдпрд╣рд╛рдБ рд╕реЗ рд╢реБрд░реВ рд╣реЛрддрд╛ рд╣реИ!\n\nЁЯСЙ /start - рдореМрдХрд╛ рди рдЪреВрдХреЗрдВ!",
        "ЁЯЪи *рдЕрд▓рд░реНрдЯ: High-confidence predictions рдЙрдкрд▓рдмреНрдз!* \n\nЁЯФе рдЖрдЬ рдХреЗ рдореИрдЪреЛрдВ рдореЗрдВ great winning potential рд╣реИ!\n\nЁЯСЙ /start - рдЕрдкрдиреА predictions рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ!",
        "ЁЯТ╡ *рдкреИрд╕рд╛ рдХрдорд╛рдиреЗ рдХрд╛ рдЕрд╡рд╕рд░ рдЗрдВрддрдЬрд╝рд╛рд░ рдХрд░ рд░рд╣рд╛ рд╣реИ!* \n\nЁЯПЖ рдЖрдЬ рдХреЗ рдореИрдЪреЛрдВ рдХреЗ рд▓рд┐рдП professional AI predictions!\n\nЁЯСЙ /start - рдЕрдм рдХрдорд╛рдИ рд╢реБрд░реВ рдХрд░реЗрдВ!",
        "ЁЯМЯ *рдЖрдкрдХреА рд╕рдлрд▓рддрд╛ рдХреА рдХрд╣рд╛рдиреА рдЖрдЬ рд╕реЗ рд╢реБрд░реВ рд╣реЛрддреА рд╣реИ!* \n\nЁЯУИ рд╣рдЬрд╛рд░реЛрдВ рд▓реЛрдЧреЛрдВ рдХреЗ рд╕рд╛рде рдЬреБрдбрд╝реЗрдВ рдЬреЛ рд╣рдорд╛рд░реЗ predictions рд╕реЗ рдЬреАрдд рд░рд╣реЗ рд╣реИрдВ!\n\nЁЯСЙ /start - рдЕрдкрдиреА рдпрд╛рддреНрд░рд╛ рд╢реБрд░реВ рдХрд░реЗрдВ!"
    ],
    'bn': [
        "ЁЯЪА *ржЖржкржирж┐ ржЖржкржирж╛рж░ рж╕рзБржпрзЛржЧ ржХрзЗржи рж╣рж╛рж░рж╛ржЪрзНржЫрзЗржи?* \n\nЁЯТ░ ржЖржкржирж┐ ржЖржорж╛ржжрзЗрж░ AI predictions ржжрж┐ржпрж╝рзЗ ржжрзИржирж┐ржХ $50-$100 ржЖржпрж╝ ржХрж░рждрзЗ ржкрж╛рж░рзЗржи!\n\nЁЯСЙ predictions ржкрзЗрждрзЗ /start ржХрзНрж▓рж┐ржХ ржХрж░рзБржи!",
        "ЁЯФе *рж╕рзБржпрзЛржЧ рж╣рж╛рждржЫрж╛ржбрж╝рж╛ ржХрж░ржмрзЗржи ржирж╛!* \n\nЁЯОп ржЖржкржирж╛рж░ ржЬржирзНржп рж▓рж╛ржЗржн ржХрзНрж░рж┐ржХрзЗржЯ predictions ржЕржкрзЗржХрзНрж╖рж╛ ржХрж░ржЫрзЗ!\n\nЁЯСЙ /start - ржЖржкржирж╛рж░ winning predictions ржкрж╛ржи!",
        "ЁЯТО *ржЖржкржирж╛рж░ winning streak ржЖржкржирж╛рж░ ржЬржирзНржп ржЕржкрзЗржХрзНрж╖рж╛ ржХрж░ржЫрзЗ!* \n\nЁЯУК 85%+ accuracy рж╕рж╣ AI-powered cricket predictions!\n\nЁЯСЙ /start - ржПржЦржиржЗ ржЖржпрж╝ рж╢рзБрж░рзБ ржХрж░рзБржи!",
        "тЪб *рж╕ржоржпрж╝х░▒цШп ржЯрж╛ржХрж╛, ржПржЯрж┐ ржирж╖рзНржЯ ржХрж░ржмрзЗржи ржирж╛!* \n\nЁЯПП рж▓рж╛ржЗржн ржорзНржпрж╛ржЪржЧрзБрж▓рж┐ ржжрзБрж░рзНржжрж╛ржирзНржд odds ржирж┐ржпрж╝рзЗ ржЪрж▓ржЫрзЗ!\n\nЁЯСЙ /start - рждрж╛рждрзНржХрзНрж╖ржгрж┐ржХ predictions ржкрж╛ржи!",
        "ЁЯОп *ржирж┐ржЦрзБржБржд predictions ржкрзНрж░рж╕рзНрждрзБржд!* \n\nЁЯТ░ ржЖржкржирж╛рж░ ржжрзИржирж┐ржХ ржЖржпрж╝рзЗрж░ ржкрже ржПржЦрж╛ржи ржерзЗржХрзЗ рж╢рзБрж░рзБ рж╣ржпрж╝!\n\nЁЯСЙ /start - рж╕рзБржпрзЛржЧ рж╣рж╛рж░рж╛ржмрзЗржи ржирж╛!",
        "ЁЯЪи *рж╕рждрж░рзНржХрждрж╛: ржЙржЪрзНржЪ-ржЖрждрзНржоржмрж┐рж╢рзНржмрж╛рж╕рзЗрж░ predictions ржЙржкрж▓ржмрзНржз!* \n\nЁЯФе ржЖржЬржХрзЗрж░ ржорзНржпрж╛ржЪржЧрзБрж▓рж┐рждрзЗ ржжрзБрж░рзНржжрж╛ржирзНржд ржЬржпрж╝рзЗрж░ рж╕ржорзНржнрж╛ржмржирж╛ рж░ржпрж╝рзЗржЫрзЗ!\n\nЁЯСЙ /start - ржЖржкржирж╛рж░ predictions ржжрж╛ржмрж┐ ржХрж░рзБржи!",
        "ЁЯТ╡ *ржЯрж╛ржХрж╛ ржЙржкрж╛рж░рзНржЬржирзЗрж░ рж╕рзБржпрзЛржЧ ржЕржкрзЗржХрзНрж╖рж╛ ржХрж░ржЫрзЗ!* \n\nЁЯПЖ ржЖржЬржХрзЗрж░ ржорзНржпрж╛ржЪржЧрзБрж▓рж┐рж░ ржЬржирзНржп ржкрзЗрж╢рж╛ржжрж╛рж░ AI predictions!\n\nЁЯСЙ /start - ржПржЦржиржЗ ржЖржпрж╝ рж╢рзБрж░рзБ ржХрж░рзБржи!",
        "ЁЯМЯ *ржЖржкржирж╛рж░ рж╕рж╛ржлрж▓рзНржпрзЗрж░ ржЧрж▓рзНржк ржЖржЬ рж╢рзБрж░рзБ рж╣ржпрж╝!* \n\nЁЯУИ рж╣рж╛ржЬрж╛рж░рзЛ ржорж╛ржирзБрж╖рзЗрж░ рж╕рж╛ржерзЗ ржпрзЛржЧ ржжрж┐ржи ржпрж╛рж░рж╛ ржЖржорж╛ржжрзЗрж░ predictions ржжрж┐ржпрж╝рзЗ ржЬрж┐рждржЫрзЗ!\n\nЁЯСЙ /start - ржЖржкржирж╛рж░ ржпрж╛рждрзНрж░рж╛ рж╢рзБрж░рзБ ржХрж░рзБржи!"
    ],
    'ur': [
        "ЁЯЪА *╪в┘╛ ╪з┘╛┘Ж╪з ┘Е┘И┘В╪╣ ┌й█М┘И┌║ ┌й┌╛┘И ╪▒█Б█Т █Б█М┌║╪Я* \n\nЁЯТ░ ╪в┘╛ █Б┘Е╪з╪▒█Т AI predictions ┌й█Т ╪│╪з╪к┌╛ ╪▒┘И╪▓╪з┘Ж█Б $50-$100 ┌й┘Е╪з ╪│┌й╪к█Т █Б█М┌║!\n\nЁЯСЙ predictions ╪н╪з╪╡┘Д ┌й╪▒┘Ж█Т ┌й█Т ┘Д█М█Т /start ┌й┘Д┌й ┌й╪▒█М┌║!",
        "ЁЯФе *┘Е┘И┘В╪╣┘И┌║ ┌й┘И █Б╪з╪к┌╛ ╪│█Т ┘Ж█Б ╪м╪з┘Ж█Т ╪п█М┌║!* \n\nЁЯОп ╪в┘╛ ┌й█Т ┘Д█М█Т ┘Д╪з╪ж█М┘И ┌й╪▒┌й┘╣ predictions ┘Е┘Ж╪к╪╕╪▒ █Б█М┌║!\n\nЁЯСЙ /start - ╪з┘╛┘Ж█М winning predictions ╪н╪з╪╡┘Д ┌й╪▒█М┌║!",
        "ЁЯТО *╪в┘╛ ┌й█М winning streak ╪в┘╛ ┌й╪з ╪з┘Ж╪к╪╕╪з╪▒ ┌й╪▒ ╪▒█Б█М █Б█Т!* \n\nЁЯУК 85%+ accuracy ┌й█Т ╪│╪з╪к┌╛ AI-powered cricket predictions!\n\nЁЯСЙ /start - ╪з╪и ┌й┘Е╪з╪ж█М ╪┤╪▒┘И╪╣ ┌й╪▒█М┌║!",
        "тЪб *┘И┘В╪к ┘╛█М╪│█Б █Б█Т╪М ╪з╪│█Т ╪╢╪з╪ж╪╣ ┘Ж█Б ┌й╪▒█М┌║!* \n\nЁЯПП ┘Д╪з╪ж█М┘И ┘Е█М┌Ж╪▓ ╪и█Б╪к╪▒█М┘Ж odds ┌й█Т ╪│╪з╪к┌╛ ┌Ж┘Д ╪▒█Б█Т █Б█М┌║!\n\nЁЯСЙ /start - ┘Б┘И╪▒█М predictions ╪н╪з╪╡┘Д ┌й╪▒█М┌║!",
        "ЁЯОп *╪и╪з┘Д┌й┘Д ╪╡╪н█М╪н predictions ╪к█М╪з╪▒ █Б█М┌║!* \n\nЁЯТ░ ╪в┘╛ ┌й█М ╪▒┘И╪▓╪з┘Ж█Б ┌й┘Е╪з╪ж█М ┌й╪з ╪▒╪з╪│╪к█Б █М█Б╪з┌║ ╪│█Т ╪┤╪▒┘И╪╣ █Б┘И╪к╪з █Б█Т!\n\nЁЯСЙ /start - ┘Е┘И┘В╪╣ ┘Ж█Б ┌Ж┌╛┘И┌С█М┌║!",
        "ЁЯЪи *╪з┘Д╪▒┘╣: ╪з╪╣┘Д█М ╪з╪╣╪к┘Е╪з╪п predictions ╪п╪│╪к█М╪з╪и!* \n\nЁЯФе ╪в╪м ┌й█Т ┘Е█М┌Ж┘И┌║ ┘Е█М┌║ ╪и█Б╪к╪▒█М┘Ж ╪м█М╪к┘Ж█Т ┌й█М ╪╡┘Д╪з╪н█М╪к █Б█Т!\n\nЁЯСЙ /start - ╪з┘╛┘Ж█М predictions ╪н╪з╪╡┘Д ┌й╪▒█М┌║!",
        "ЁЯТ╡ *┘╛█М╪│█Б ┌й┘Е╪з┘Ж█Т ┌й╪з ┘Е┘И┘В╪╣ ╪з┘Ж╪к╪╕╪з╪▒ ┌й╪▒ ╪▒█Б╪з █Б█Т!* \n\nЁЯПЖ ╪в╪м ┌й█Т ┘Е█М┌Ж┘И┌║ ┌й█Т ┘Д█М█Т ┘╛█М╪┤█Б ┘И╪▒╪з┘Ж█Б AI predictions!\n\nЁЯСЙ /start - ╪з╪и ┌й┘Е╪з╪ж█М ╪┤╪▒┘И╪╣ ┌й╪▒█М┌║!",
        "ЁЯМЯ *╪в┘╛ ┌й█М ┌й╪з┘Е█М╪з╪и█М ┌й█М ┌й█Б╪з┘Ж█М ╪в╪м ╪│█Т ╪┤╪▒┘И╪╣ █Б┘И╪к█М █Б█Т!* \n\nЁЯУИ █Б╪▓╪з╪▒┘И┌║ ┘Д┘И┌п┘И┌║ ┌й█Т ╪│╪з╪к┌╛ ╪┤╪з┘Е┘Д █Б┘И┌║ ╪м┘И █Б┘Е╪з╪▒█Т predictions ╪│█Т ╪м█М╪к ╪▒█Б█Т █Б█М┌║!\n\nЁЯСЙ /start - ╪з┘╛┘Ж╪з ╪│┘Б╪▒ ╪┤╪▒┘И╪╣ ┌й╪▒█М┌║!"
    ],
    'ne': [
        "ЁЯЪА *рддрдкрд╛рдИрдВ рдЖрдлреНрдиреЛ рдЕрд╡рд╕рд░ рдХрд┐рди рд╣рд░рд╛рдЙрдБрджреИ рд╣реБрдиреБрд╣реБрдиреНрдЫ?* \n\nЁЯТ░ рддрдкрд╛рдИрдВ рд╣рд╛рдореНрд░реЛ AI predictions рдХреЛ рд╕рд╛рде рджреИрдирд┐рдХ $50-$100 рдХрдорд╛рдЙрди рд╕рдХреНрдиреБрд╣реБрдиреНрдЫ!\n\nЁЯСЙ predictions рдкреНрд░рд╛рдкреНрдд рдЧрд░реНрди /start рдХреНрд▓рд┐рдХ рдЧрд░реНрдиреБрд╣реЛрд╕реН!",
        "ЁЯФе *рдЕрд╡рд╕рд░рд╣рд░реВ рд╣рд╛рдд рдирдмрд╛рдЯ рдЬрд╛рди рджрд┐рдиреБрд╣реЛрд╕реН!* \n\nЁЯОп рддрдкрд╛рдИрдВрдХреЛ рд▓рд╛рдЧрд┐ рд▓рд╛рдЗрдн рдХреНрд░рд┐рдХреЗрдЯ predictions рдкрд░реНрдЦрд┐рд░рд╣реЗрдХрд╛ рдЫрдиреН!\n\nЁЯСЙ /start - рдЖрдлреНрдиреЛ winning predictions рдкреНрд░рд╛рдкреНрдд рдЧрд░реНрдиреБрд╣реЛрд╕реН!",
        "ЁЯТО *рддрдкрд╛рдИрдВрдХреЛ winning streak рд▓реЗ рддрдкрд╛рдИрдВрдХреЛ рдкрд░реНрдЦрд╛рдЗ рдЧрд░реНрджреИрдЫ!* \n\nЁЯУК 85%+ accuracy рд╕рд╣рд┐рдд AI-powered cricket predictions!\n\nЁЯСЙ /start - рдЕрдм рдХрдорд╛рдЙрдиреА рд╕реБрд░реБ рдЧрд░реНрдиреБрд╣реЛрд╕реН!",
        "тЪб *рд╕рдордп рдкреИрд╕рд╛ рд╣реЛ, рдпрд╕рд▓рд╛рдИ рдмрд░реНрдмрд╛рдж рдирдЧрд░реНрдиреБрд╣реЛрд╕реН!* \n\nЁЯПП рд▓рд╛рдЗрдн рдореНрдпрд╛рдЪрд╣рд░реВ рд░рд╛рдореНрд░реЛ odds рд╕рд╣рд┐рдд рдЪрд▓рд┐рд░рд╣реЗрдХрд╛ рдЫрдиреН!\n\nЁЯСЙ /start - рддрддреНрдХрд╛рд▓ predictions рдкреНрд░рд╛рдкреНрдд рдЧрд░реНрдиреБрд╣реЛрд╕реН!",
        "ЁЯОп *рдЙрддреНрддрдо predictions рддрдпрд╛рд░ рдЫрдиреН!* \n\nЁЯТ░ рддрдкрд╛рдИрдВрдХреЛ рджреИрдирд┐рдХ рдЖрдореНрджрд╛рдиреАрдХреЛ рдмрд╛рдЯреЛ рдпрд╣рд╛рдБрдмрд╛рдЯ рд╕реБрд░реБ рд╣реБрдиреНрдЫ!\n\nЁЯСЙ /start - рдЕрд╡рд╕рд░ рдирдЧреБрдорд╛рдЙрдиреБрд╣реЛрд╕реН!",
        "ЁЯЪи *рдЕрд▓рд░реНрдЯ: рдЙрдЪреНрдЪ-рд╡рд┐рд╢реНрд╡рд╛рд╕ predictions рдЙрдкрд▓рдмреНрдз!* \n\nЁЯФе рдЖрдЬрдХрд╛ рдореНрдпрд╛рдЪрд╣рд░реВрдорд╛ рд░рд╛рдореНрд░реЛ рдЬрд┐рддреНрдиреЗ рд╕рдореНрднрд╛рд╡рдирд╛ рдЫ!\n\nЁЯСЙ /start - рдЖрдлреНрдирд╛ predictions рджрд╛рд╡реА рдЧрд░реНрдиреБрд╣реЛрд╕реН!",
        "ЁЯТ╡ *рдкреИрд╕рд╛ рдХрдорд╛рдЙрдиреЗ рдЕрд╡рд╕рд░ рдкрд░реНрдЦрд┐рд░рд╣реЗрдХреЛ рдЫ!* \n\nЁЯПЖ рдЖрдЬрдХрд╛ рдореНрдпрд╛рдЪрд╣рд░реВрдХрд╛ рд▓рд╛рдЧрд┐ рдкреЗрд╢реЗрд╡рд░ AI predictions!\n\nЁЯСЙ /start - рдЕрдм рдХрдорд╛рдЙрдиреА рд╕реБрд░реБ рдЧрд░реНрдиреБрд╣реЛрд╕реН!",
        "ЁЯМЯ *рддрдкрд╛рдИрдВрдХреЛ рд╕рдлрд▓рддрд╛рдХреЛ рдХрдерд╛ рдЖрдЬрдмрд╛рдЯ рд╕реБрд░реБ рд╣реБрдиреНрдЫ!* \n\nЁЯУИ рд╣рдЬрд╛рд░реМрдВ рдорд╛рдирд┐рд╕рд╣рд░реВрд╕рдБрдЧ рд╕рд╛рдореЗрд▓ рд╣реБрдиреБрд╣реЛрд╕реН рдЬреЛ рд╣рд╛рдореНрд░реЛ predictions рд╕рдБрдЧ рдЬрд┐рддрд┐рд░рд╣реЗрдХрд╛ рдЫрдиреН!\n\nЁЯСЙ /start - рдЖрдлреНрдиреЛ рдпрд╛рддреНрд░рд╛ рд╕реБрд░реБ рдЧрд░реНрдиреБрд╣реЛрд╕реН!"
    ]
}

# ==================== SCHEDULED REMINDER SYSTEM ====================
def send_inactivity_reminders():
    """Send reminders to inactive users every 24 hours in their selected language"""
    try:
        print("ЁЯФФ Checking for inactive users...")
        current_time = datetime.now()
        inactive_users = []
        
        for user_id, user_data in users_storage.items():
            if user_data.get('last_activity_date'):
                last_activity = datetime.strptime(user_data['last_activity_date'], '%Y-%m-%d')
                hours_since_activity = (current_time - last_activity).total_seconds() / 3600
                
                # Send reminder if inactive for 24-48 hours (to avoid spamming)
                if 24 <= hours_since_activity <= 48:
                    # Check if we already sent reminder today
                    last_reminder = user_data.get('last_reminder_date')
                    if last_reminder != current_time.strftime('%Y-%m-%d'):
                        inactive_users.append(user_data)
        
        print(f"ЁЯУи Sending reminders to {len(inactive_users)} inactive users")
        
        for user in inactive_users:
            try:
                language = user.get('language', 'en')
                messages = INACTIVITY_MESSAGES.get(language, INACTIVITY_MESSAGES['en'])
                message = random.choice(messages)
                
                send_telegram_message(user['user_id'], message)
                print(f"тЬЕ Sent {language} reminder to user {user['user_id']}")
                
                # Update last reminder time to avoid duplicate sends
                user['last_reminder_date'] = current_time.strftime('%Y-%m-%d')
                save_user(user)
                
                # Small delay to avoid rate limiting
                time.sleep(0.5)
                
            except Exception as e:
                print(f"тЭМ Failed to send reminder to user {user['user_id']}: {e}")
                
    except Exception as e:
        print(f"тЭМ Error in reminder system: {e}")

def start_reminder_scheduler():
    """Start the background scheduler for reminders"""
    def run_scheduler():
        while True:
            try:
                send_inactivity_reminders()
                # Run every 6 hours to catch users at different times
                time.sleep(6 * 3600)  # 6 hours
            except Exception as e:
                print(f"тЭМ Scheduler error: {e}")
                time.sleep(3600)  # Wait 1 hour on error
    
    # Start scheduler in background thread
    scheduler_thread = threading.Thread(target=run_scheduler, daemon=True)
    scheduler_thread.start()
    print("тЬЕ Inactivity reminder scheduler started")

# ==================== ENHANCED USER MANAGEMENT ====================
def get_user(user_id):
    if user_id not in users_storage:
        users_storage[user_id] = {
            'user_id': user_id,
            'language': 'en',
            'prediction_count': 0,
            'last_prediction_date': None,
            'last_activity_date': datetime.now().strftime('%Y-%m-%d'),
            'player_id': None,
            'deposit_amount': 0,
            'is_registered': False,
            'registration_date': None,
            'deposit_date': None,
            'deposit_used_days': 0,
            'total_predictions_used': 0,
            'last_reminder_date': None
        }
    return users_storage[user_id]

def save_user(user_data):
    users_storage[user_data['user_id']] = user_data

def update_user_activity(user_id):
    """Update user's last activity timestamp"""
    user = get_user(user_id)
    user['last_activity_date'] = datetime.now().strftime('%Y-%m-%d')
    save_user(user)

def can_get_prediction(user_id):
    """Check if user can get prediction with 5-day limit"""
    user = get_user(user_id)
    today = datetime.now().strftime('%Y-%m-%d')
    
    # Update activity
    update_user_activity(user_id)
    
    # Check if user has deposited at least $6
    if user.get('deposit_amount', 0) < 6:
        return False, "no_deposit"
    
    # Check if deposit is still valid (5 days limit)
    if user.get('deposit_date'):
        deposit_date = datetime.strptime(user['deposit_date'], '%Y-%m-%d')
        days_since_deposit = (datetime.now() - deposit_date).days
        if days_since_deposit >= 5:
            return False, "deposit_expired"
    
    # Reset daily count if new day
    if user['last_prediction_date'] != today:
        user['prediction_count'] = 0
        user['last_prediction_date'] = today
        save_user(user)
    
    # Check daily limit
    if user['prediction_count'] >= 20:
        return False, "daily_limit"
    
    return True, "allowed"

def update_prediction_count(user_id):
    user = get_user(user_id)
    user['prediction_count'] += 1
    user['total_predictions_used'] = user.get('total_predictions_used', 0) + 1
    user['last_prediction_date'] = datetime.now().strftime('%Y-%m-%d')
    user['last_activity_date'] = datetime.now().strftime('%Y-%m-%d')
    save_user(user)

def update_deposit_info(user_id, deposit_amount):
    """Update user deposit information"""
    user = get_user(user_id)
    user['deposit_amount'] = deposit_amount
    user['deposit_date'] = datetime.now().strftime('%Y-%m-%d')
    user['deposit_used_days'] = 0
    user['prediction_count'] = 0
    user['last_prediction_date'] = datetime.now().strftime('%Y-%m-%d')
    user['last_activity_date'] = datetime.now().strftime('%Y-%m-%d')
    save_user(user)

# ==================== ENHANCED AI PREDICTION WITH CRICAPI ====================
class CricketAIPredictor:
    def __init__(self):
        self.api_key = CRICAPI_KEY
        self.last_fetch_time = None
        self.cached_matches = []
        self.used_matches = set()
        
    def fetch_live_matches(self):
        try:
            # Cache matches for 10 minutes
            current_time = datetime.now()
            if (self.last_fetch_time and 
                (current_time - self.last_fetch_time).seconds < 600 and 
                self.cached_matches):
                return self.cached_matches
                
            if not self.api_key:
                return self.get_fallback_matches()
                
            print("ЁЯМР Fetching live matches from CricAPI...")
            url = f"https://api.cricapi.com/v1/matches?apikey={self.api_key}&offset=0"
            response = requests.get(url, timeout=15)
            
            if response.status_code == 200:
                data = response.json()
                print(f"ЁЯУК API Response Status: {data.get('status')}")
                
                if data.get('status') == 'success':
                    matches = []
                    for match in data.get('data', []):
                        try:
                            match_started = match.get('matchStarted', False)
                            match_ended = match.get('matchEnded', False)
                            status = match.get('status', '').lower()
                            
                            is_live = (match_started and not match_ended) or 'live' in status or 'running' in status
                            
                            if is_live:
                                team_info = match.get('teamInfo', [])
                                if len(team_info) >= 2:
                                    team_a = team_info[0].get('name', 'Team A').strip()
                                    team_b = team_info[1].get('name', 'Team B').strip()
                                    
                                    if team_a and team_b and team_a != 'Team A' and team_b != 'Team B':
                                        match_data = {
                                            'id': match.get('id', ''),
                                            'team_a': team_a,
                                            'team_b': team_b,
                                            'date': match.get('date', ''),
                                            'series': match.get('series', 'International'),
                                            'status': match.get('status', 'Live'),
                                            'venue': match.get('venue', 'Unknown')
                                        }
                                        matches.append(match_data)
                                        print(f"тЬЕ Found live match: {team_a} vs {team_b}")
                        except Exception as e:
                            continue
                    
                    if matches:
                        self.cached_matches = matches
                        self.last_fetch_time = current_time
                        print(f"ЁЯОп Total live matches found: {len(matches)}")
                        return matches
                    else:
                        print("тЭМ No live matches found, using fallback")
                        return self.get_fallback_matches()
                else:
                    return self.get_fallback_matches()
            else:
                return self.get_fallback_matches()
                
        except Exception as e:
            print(f"тЭМ CricAPI Error: {e}")
            return self.get_fallback_matches()
    
    def get_fallback_matches(self):
        today = datetime.now()
        fallback_matches = [
            {'id': '1', 'team_a': 'India', 'team_b': 'Pakistan', 'series': 'Asia Cup', 'status': 'Live'},
            {'id': '2', 'team_a': 'Australia', 'team_b': 'England', 'series': 'World Cup', 'status': 'Live'},
            {'id': '3', 'team_a': 'South Africa', 'team_b': 'New Zealand', 'series': 'Championship', 'status': 'Live'},
            {'id': '4', 'team_a': 'West Indies', 'team_b': 'Sri Lanka', 'series': 'Caribbean Cup', 'status': 'Live'}
        ]
        return fallback_matches
    
    def analyze_team_performance(self, team1, team2):
        team_stats = {
            'india': {'rating': 118, 'key_players': ['Kohli', 'Sharma', 'Bumrah']},
            'pakistan': {'rating': 112, 'key_players': ['Babar', 'Rizwan', 'Afridi']},
            'australia': {'rating': 116, 'key_players': ['Smith', 'Warner', 'Cummins']},
            'england': {'rating': 114, 'key_players': ['Root', 'Buttler', 'Stokes']},
            'south africa': {'rating': 106, 'key_players': ['Markram', 'Rabada', 'Miller']},
            'new zealand': {'rating': 108, 'key_players': ['Williamson', 'Boult', 'Conway']},
            'west indies': {'rating': 92, 'key_players': ['Hope', 'Joseph', 'Holder']},
            'sri lanka': {'rating': 90, 'key_players': ['Mendis', 'Theekshana', 'Shanaka']}
        }
        
        team1_data = team_stats.get(team1.lower(), {'rating': 95, 'key_players': ['Key Players']})
        team2_data = team_stats.get(team2.lower(), {'rating': 95, 'key_players': ['Key Players']})
        
        team1_rating = team1_data['rating']
        team2_rating = team2_data['rating']
        
        team1_form = random.uniform(0.85, 1.25)
        team2_form = random.uniform(0.85, 1.25)
        
        team1_strength = team1_rating * team1_form
        team2_strength = team2_rating * team2_form
        
        total_strength = team1_strength + team2_strength
        team1_probability = team1_strength / total_strength
        
        if team1_probability > 0.5:
            winner = team1
            confidence = max(60, min(94, int(team1_probability * 100)))
        else:
            winner = team2
            confidence = max(60, min(94, int((1 - team1_probability) * 100)))
        
        analysis_points = [
            f"ЁЯПЖ **Team Ratings**: {team1} ({team1_rating}) vs {team2} ({team2_rating})",
            f"ЁЯУИ **Current Form**: {team1} ({team1_form:.1f}x) vs {team2} ({team2_form:.1f}x)",
            f"ЁЯОп **Key Players**: {', '.join(team1_data['key_players'][:2])} vs {', '.join(team2_data['key_players'][:2])}",
            f"ЁЯПЯя╕П **Match Conditions**: Pitch favors {random.choice(['batting', 'bowling'])}",
            f"ЁЯМжя╕П **Weather**: {random.choice(['Clear', 'Humid', 'Good for cricket'])}"
        ]
        
        random.shuffle(analysis_points)
        selected_analysis = analysis_points[:3]
        
        prediction_types = [
            f"{winner} to win",
            f"{winner} victory predicted", 
            f"{winner} expected to dominate",
            f"Strong chances for {winner}"
        ]
        
        return {
            'prediction': random.choice(prediction_types),
            'confidence': confidence,
            'analysis': "\n".join(selected_analysis),
            'team_a': team1,
            'team_b': team2,
            'user_analysis': f"Based on comprehensive analysis of team ratings and current form, {winner} shows stronger chances with {confidence}% confidence."
        }
    
    def get_prediction(self):
        matches = self.fetch_live_matches()
        
        if not matches:
            fallback_match = random.choice(self.get_fallback_matches())
            return self.analyze_team_performance(fallback_match['team_a'], fallback_match['team_b'])
        
        available_matches = [m for m in matches if m['id'] not in self.used_matches]
        
        if not available_matches:
            self.used_matches.clear()
            available_matches = matches
        
        selected_match = random.choice(available_matches)
        self.used_matches.add(selected_match['id'])
        
        print(f"ЁЯОп Selected match: {selected_match['team_a']} vs {selected_match['team_b']}")
        return self.analyze_team_performance(selected_match['team_a'], selected_match['team_b'])

ai_predictor = CricketAIPredictor()

# ==================== LANGUAGE MESSAGES (Updated for 5-day limit) ====================
LANGUAGE_MESSAGES = {
    'en': {
        # ... existing messages ...
        'deposit_success': "ЁЯОК *Deposit Verified Successfully!*\n\nЁЯТ░ *Deposit Amount:* ${amount}\nтЬЕ *Status:* Verified\n\nЁЯОп You now have access to AI-powered predictions!\n\nЁЯТ░ *Validity:* 5 days (20 predictions daily)\n\nClick below to get your first prediction:",
        'deposit_expired': "тП░ *Deposit Validity Expired!*\n\nYour 5-day prediction access has ended.\n\nЁЯТО Make a new deposit to continue predictions!\n\nЁЯТ░ Deposit now to restart your prediction access!",
        'prediction_limit': "ЁЯЪл *Prediction Limit Reached*\n\nYou've used all 20 predictions for today.\n\nЁЯТб *Options:*\nтАв Wait until tomorrow (12 hours)\nтАв Make another deposit for immediate access\n\nЁЯТ░ Continue with a new deposit!",
        # ... other messages same as before ...
    },
    'hi': {
        'deposit_success': "ЁЯОК *рдЬрдорд╛ рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рд╕рддреНрдпрд╛рдкрд┐рдд!*\n\nЁЯТ░ *рдЬрдорд╛ рд░рд╛рд╢рд┐:* ${amount}\nтЬЕ *рд╕реНрдерд┐рддрд┐:* рд╕рддреНрдпрд╛рдкрд┐рдд\n\nЁЯОп рдЕрдм рдЖрдкрдХреЗ рдкрд╛рд╕ AI-рдкрд╛рд╡рд░реНрдб рднрд╡рд┐рд╖реНрдпрд╡рд╛рдгрд┐рдпреЛрдВ рддрдХ рдкрд╣реБрдВрдЪ рд╣реИ!\n\nЁЯТ░ *рд╡реИрдзрддрд╛:* 5 рджрд┐рди (рд░реЛрдЬ 20 рднрд╡рд┐рд╖реНрдпрд╡рд╛рдгрд┐рдпрд╛рдБ)\n\nрдЕрдкрдиреА рдкрд╣рд▓реА рднрд╡рд┐рд╖реНрдпрд╡рд╛рдгреА рдкреНрд░рд╛рдкреНрдд рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдиреАрдЪреЗ рдХреНрд▓рд┐рдХ рдХрд░реЗрдВ:",
        'deposit_expired': "тП░ *рдЬрдорд╛ рд╡реИрдзрддрд╛ рд╕рдорд╛рдкреНрдд!*\n\nрдЖрдкрдХреА 5-рджрд┐рди рдХреА рднрд╡рд┐рд╖реНрдпрд╡рд╛рдгреА рдкрд╣реБрдВрдЪ рд╕рдорд╛рдкреНрдд рд╣реЛ рдЧрдИ рд╣реИред\n\nЁЯТО рдирдпрд╛ рдЬрдорд╛ рдХрд░рдХреЗ рднрд╡рд┐рд╖реНрдпрд╡рд╛рдгрд┐рдпрд╛рдБ рдЬрд╛рд░реА рд░рдЦреЗрдВ!\n\nЁЯТ░ рдЕрдм рдЬрдорд╛ рдХрд░рдХреЗ рдЕрдкрдиреА рднрд╡рд┐рд╖реНрдпрд╡рд╛рдгреА рдкрд╣реБрдВрдЪ рдкреБрдирдГ рдкреНрд░рд╛рд░рдВрдн рдХрд░реЗрдВ!",
        'prediction_limit': "ЁЯЪл *рднрд╡рд┐рд╖реНрдпрд╡рд╛рдгреА рд╕реАрдорд╛ рдкреВрд░реНрдг*\n\nрдЖрдкрдиреЗ рдЖрдЬ рдХреА рд╕рднреА 20 рднрд╡рд┐рд╖реНрдпрд╡рд╛рдгрд┐рдпреЛрдВ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░ рд▓рд┐рдпрд╛ рд╣реИред\n\nЁЯТб *рд╡рд┐рдХрд▓реНрдк:*\nтАв рдХрд▓ рддрдХ рдкреНрд░рддреАрдХреНрд╖рд╛ рдХрд░реЗрдВ (12 рдШрдВрдЯреЗ)\nтАв рддреБрд░рдВрдд рдкрд╣реБрдВрдЪ рдХреЗ рд▓рд┐рдП рджреВрд╕рд░рд╛ рдЬрдорд╛ рдХрд░реЗрдВ\n\nЁЯТ░ рдирдП рдЬрдорд╛ рдХреЗ рд╕рд╛рде рдЬрд╛рд░реА рд░рдЦреЗрдВ!",
        # ... other languages similarly updated ...
    }
}

# ==================== TELEGRAM FUNCTIONS ====================
def send_telegram_message(chat_id, text, reply_markup=None, parse_mode='Markdown'):
    try:
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
        payload = {
            'chat_id': chat_id,
            'text': text,
            'parse_mode': parse_mode
        }
        if reply_markup:
            payload['reply_markup'] = reply_markup
        
        response = requests.post(url, json=payload, timeout=10)
        return response.json()
    except Exception as e:
        print(f"Send message error: {e}")
        return None

def edit_telegram_message(chat_id, message_id, text, reply_markup=None):
    try:
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/editMessageText"
        payload = {
            'chat_id': chat_id,
            'message_id': message_id,
            'text': text,
            'parse_mode': 'Markdown'
        }
        if reply_markup:
            payload['reply_markup'] = reply_markup
        
        response = requests.post(url, json=payload, timeout=10)
        return response.json()
    except Exception as e:
        print(f"Edit message error: {e}")
        return None

# ==================== WEBHOOK HANDLER WITH 5-DAY LIMIT ====================
@app.route('/webhook', methods=['POST'])
def webhook():
    try:
        data = request.get_json()
        
        if 'message' in data:
            message = data['message']
            chat_id = message['chat']['id']
            text = message.get('text', '')
            user_id = message['from']['id']
            
            # Update user activity for ANY message
            update_user_activity(user_id)
            
            user = get_user(user_id)
            
            if text == '/start':
                keyboard = {
                    'inline_keyboard': [
                        [{'text': 'ЁЯЗ║ЁЯЗ╕ English', 'callback_data': 'lang_en'}],
                        [{'text': 'ЁЯЗоЁЯЗ│ рд╣рд┐рдВрджреА', 'callback_data': 'lang_hi'}],
                        [{'text': 'ЁЯЗзЁЯЗй ржмрж╛ржВрж▓рж╛', 'callback_data': 'lang_bn'}],
                        [{'text': 'ЁЯЗ╡ЁЯЗ░ ╪з╪▒╪п┘И', 'callback_data': 'lang_ur'}],
                        [{'text': 'ЁЯЗ│ЁЯЗ╡ рдиреЗрдкрд╛рд▓реА', 'callback_data': 'lang_ne'}]
                    ]
                }
                msg_data = LANGUAGE_MESSAGES.get(user['language'], LANGUAGE_MESSAGES['en'])
                send_telegram_message(chat_id, msg_data['welcome'], keyboard)
            
            elif text.isdigit() and len(text) >= 5:
                update_user_activity(user_id)
                # ... player ID handling code ...
        
        elif 'callback_query' in data:
            callback = data['callback_query']
            chat_id = callback['message']['chat']['id']
            message_id = callback['message']['message_id']
            data_value = callback['data']
            user_id = callback['from']['id']
            
            update_user_activity(user_id)
            user = get_user(user_id)
            msg_data = LANGUAGE_MESSAGES.get(user['language'], LANGUAGE_MESSAGES['en'])
            
            if data_value == 'get_prediction':
                can_predict, reason = can_get_prediction(user_id)
                
                if not can_predict:
                    if reason == "deposit_expired":
                        # 5 DAYS COMPLETED - ONLY DEPOSIT BUTTON
                        keyboard = {
                            'inline_keyboard': [
                                [{'text': msg_data['deposit_again_btn'], 'url': 'https://mostbet-king.com/5rTs'}]
                            ]
                        }
                        edit_telegram_message(chat_id, message_id, msg_data['deposit_expired'], keyboard)
                    
                    elif reason == "daily_limit":
                        # DAILY LIMIT - BOTH BUTTONS
                        keyboard = {
                            'inline_keyboard': [
                                [{'text': msg_data['deposit_again_btn'], 'url': 'https://mostbet-king.com/5rTs'}],
                                [{'text': msg_data['try_tomorrow_btn'], 'callback_data': 'try_tomorrow'}]
                            ]
                        }
                        edit_telegram_message(chat_id, message_id, msg_data['prediction_limit'], keyboard)
                    
                    else:
                        # NO DEPOSIT
                        keyboard = {
                            'inline_keyboard': [
                                [{'text': msg_data['deposit_btn'], 'url': 'https://mostbet-king.com/5rTs'}]
                            ]
                        }
                        edit_telegram_message(chat_id, message_id, msg_data['deposit_not_found'], keyboard)
                
                else:
                    # USER CAN GET PREDICTION
                    prediction = ai_predictor.get_prediction()
                    update_prediction_count(user_id)
                    
                    keyboard = {
                        'inline_keyboard': [
                            [{'text': msg_data['next_prediction_btn'], 'callback_data': 'get_prediction'}]
                        ]
                    }
                    
                    message_text = msg_data['prediction_text'].format(
                        team_a=prediction['team_a'],
                        team_b=prediction['team_b'],
                        prediction=prediction['prediction'],
                        confidence=prediction['confidence'],
                        analysis=prediction['user_analysis']
                    )
                    
                    edit_telegram_message(chat_id, message_id, message_text, keyboard)
            
            elif data_value == 'try_tomorrow':
                edit_telegram_message(chat_id, message_id, "тП│ Please try again in 12 hours for new predictions.")
        
        return jsonify({"status": "success"})
    
    except Exception as e:
        print(f"Webhook error: {e}")
        return jsonify({"status": "error", "message": str(e)})

# ==================== START SCHEDULER ====================
start_reminder_scheduler()

# Rest of your routes remain the same...
@app.route('/')
def home():
    return "тЬЕ Sports Prediction Bot - 5 Day Limit & 24h Reminders Active!"

if __name__ == '__main__':
    app.run(debug=True)
