import os
import logging
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler, 
    ContextTypes
)

# Setup logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Bot token from environment
BOT_TOKEN = os.environ.get('BOT_TOKEN')

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    logger.info(f"Start command from user {user.id}")
    
    # Language selection keyboard
    keyboard = [
        [InlineKeyboardButton("ЁЯЗ║ЁЯЗ╕ English", callback_data="lang_en")],
        [InlineKeyboardButton("ЁЯЗоЁЯЗ│ Hindi", callback_data="lang_hi")],
        [InlineKeyboardButton("ЁЯЗзЁЯЗй Bangla", callback_data="lang_bn")],
        [InlineKeyboardButton("ЁЯЗ╡ЁЯЗ░ Urdu", callback_data="lang_ur")],
        [InlineKeyboardButton("ЁЯЗ│ЁЯЗ╡ Nepali", callback_data="lang_ne")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "ЁЯМН *Select Your Preferred Language*\n\n"
        "Please choose your language:",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def handle_language_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    language_code = query.data.split('_')[1]
    
    # Language messages
    messages = {
        'en': "тЬЕ You selected English! ЁЯЗ║ЁЯЗ╕",
        'hi': "тЬЕ рдЖрдкрдиреЗ рд╣рд┐рдВрджреА рдЪреБрдиреА! ЁЯЗоЁЯЗ│", 
        'bn': "тЬЕ ржЖржкржирж┐ ржмрж╛ржВрж▓рж╛ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзЗржЫрзЗржи! ЁЯЗзЁЯЗй",
        'ur': "тЬЕ ╪в┘╛ ┘Ж█Т ╪з╪▒╪п┘И ┘Е┘Ж╪к╪о╪и ┌й█М! ЁЯЗ╡ЁЯЗ░",
        'ne': "тЬЕ рддрдкрд╛рдИрдВрд▓реЗ рдиреЗрдкрд╛рд▓реА рдЪрдпрди рдЧрд░реНрдиреБрднрдпреЛ! ЁЯЗ│ЁЯЗ╡"
    }
    
    instructions = {
        'en': """ЁЯМР *Step 1 - Register*

тА╝я╕П THE ACCOUNT MUST BE NEW

1я╕ПтГг If after clicking the "REGISTER" button you get to the old account, you need to log out of it and click the button again.

2я╕ПтГг Specify a promocode during registration: **FREE**

тЬЕ After REGISTRATION, click the "CHECK REGISTRATION" button""",

        'hi': """ЁЯМР *рдЪрд░рдг 1 - рдкрдВрдЬреАрдХрд░рдг*

тА╝я╕П рдЦрд╛рддрд╛ рдирдпрд╛ рд╣реЛрдирд╛ рдЪрд╛рд╣рд┐рдП

1я╕ПтГг рдпрджрд┐ "REGISTER" рдмрдЯрди рдкрд░ рдХреНрд▓рд┐рдХ рдХрд░рдиреЗ рдХреЗ рдмрд╛рдж рдЖрдк рдкреБрд░рд╛рдиреЗ рдЦрд╛рддреЗ рдореЗрдВ рдЖрддреЗ рд╣реИрдВ, рддреЛ рдЖрдкрдХреЛ рдЙрд╕рд╕реЗ рд▓реЙрдЧ рдЖрдЙрдЯ рдХрд░рдирд╛ рд╣реЛрдЧрд╛ рдФрд░ рдлрд┐рд░ рд╕реЗ рдмрдЯрди рдкрд░ рдХреНрд▓рд┐рдХ рдХрд░рдирд╛ рд╣реЛрдЧрд╛ред

2я╕ПтГг рдкрдВрдЬреАрдХрд░рдг рдХреЗ рджреМрд░рд╛рди рдкреНрд░реЛрдореЛрдХреЛрдб рдирд┐рд░реНрджрд┐рд╖реНрдЯ рдХрд░реЗрдВ: **FREE**

тЬЕ рдкрдВрдЬреАрдХрд░рдг рдХреЗ рдмрд╛рдж, "CHECK REGISTRATION" рдмрдЯрди рдкрд░ рдХреНрд▓рд┐рдХ рдХрд░реЗрдВ"""
    }
    
    keyboard = [
        [
            InlineKeyboardButton("ЁЯУ▓ Register", url="https://1w.com/registration?affiliate=FREE"),
            InlineKeyboardButton("тЬЕ Check Registration", callback_data="check_reg")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        f"{messages.get(language_code, 'тЬЕ Language selected!')}\n\n{instructions.get(language_code, instructions['en'])}",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def start_polling():
    """Start the bot with polling"""
    try:
        application = Application.builder().token(BOT_TOKEN).build()
        
        # Register handlers
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CallbackQueryHandler(handle_language_selection, pattern="^lang_"))
        
        logger.info("Starting bot polling...")
        await application.run_polling()
        
    except Exception as e:
        logger.error(f"Polling failed: {e}")

# For webhook method (optional)
def webhook_handler(request):
    return {"status": "Using polling method"}
